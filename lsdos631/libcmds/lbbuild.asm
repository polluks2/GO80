;LBBUILD/ASM - BUILD command	TITLE	<BUILD - LS-DOS 6.3>;;CPL	EQU	80		; Chars per line;*GET	SVCMAC			; System SVC macros*GET	VALUES			; Misc equates;	ORG	2400H;START	LD	(SAVESP+1),SP	@@CKBRKC	JR	NZ,ABORT	CALL	BUILD	LD	HL,0SAVESP	LD	SP,$-$	@@CKBRKC	RET;;	I/O Error handler;IOERR	LD	H,00H	LD	L,A	OR	0C0H	LD	C,A	@@ERROR	JR	SAVESP;;	Internal error message handling;BADIGS	LD	HL,BADIGS$	DB	0DDHODDIGS	LD	HL,ODDIGS$	DB	0DDHSPCREQ	LD	HL,SPCREQ$	DB	0DDHEXISTS	LD	HL,EXISTS$	@@LOGOT			; Log error message;ABORT	LD	HL,-1		; Set abort code	JR	SAVESP		;   and exit;;	Build - build a file;BUILD	LD	DE,FCB1	@@FSPEC	JR	NZ,SPCREQ;;	Legal filespec - stuff default /ext of JCL;	PUSH	HL	LD	HL,JCLEXT	@@FEXT	POP	HL;;	Pick up parameters if any;	LD	DE,PRMTBL$	@@PARAM	JR	NZ,IOERR;;	Position to extension;	LD	HL,FCB1SLASH?	LD	A,(HL)	INC	HL	CP	CR	JR	Z,NOTKSM	CP	'/'	JR	NZ,SLASH?;;	Is the extension KSM?;	PUSH	HL	LD	A,(HL)	INC	HL	CP	'K'	JR	NZ,NOTKSM	LD	A,(HL)	INC	HL	CP	'S'	JR	NZ,NOTKSM	LD	A,(HL)	CP	'M'	JR	NZ,NOTKSM;;	Extension is /KSM - stuff 0FFH in indicator;	LD	A,0FFH	LD	(KSM?+1),A;;	Is the extension /JCL?;NOTKSM	POP	HL	LD	A,(HL)	INC	HL	CP	'J'	JR	NZ,INIT	LD	A,(HL)	INC	HL	CP	'C'	JR	NZ,INIT	LD	A,(HL)	CP	'L'	JR	NZ,INIT	LD	A,CPL-1	LD	(LINLEN+2),A;;	Init the file with LRL of 256;INIT	LD	HL,IOBUF	LD	DE,FCB1	LD	B,00H	@@INIT	JR	NZ,IOERRA;;	Stuff filespec into buffer;	PUSH	AF	LD	DE,FILEBUF	LD	BC,(FCB1+6)	LD	A,(FCB1)	CALL	$FNAME	JR	NZ,IOERRA	POP	AF;	LD	HL,BMESS1	JR	C,SETBUF;;	File already exists, was APPEND specified?;APPEND	LD	BC,$-$	LD	DE,FCB1	INC	C	JR	Z,APP1	@@CLOSE	JP	Z,EXISTSIOERRA	JP	IOERR;;	Position to end of file for append;APP1	@@PEOF	LD	HL,BMESS2;;	Display building/appending message;SETBUF	CALL	DSPLY	LD	HL,FILEBUF	CALL	DSPLY	LD	C,0DH	@@DSP	JR	NZ,IOERRA	LD	HL,BUFFER;;	Is this a KSM file?;KSM?	LD	A,$-$	OR	A	JR	Z,LINLEN;;	KSM loop - Get curr letter and increment;KSM1	PUSH	HL	LD	HL,LETBUF	INC	(HL)	LD	A,(HL);;	Finished with all the KSM keys?;	CP	'Z'+1	JR	NZ,DISSTR	POP	HL	JR	GOTEND;;	Display letter and "=> ";DISSTR	CALL	DSPLY	POP	HL;;	Input line with either 255 or 79 chars;LINLEN	LD	BC,255<8	@@KEYIN	JR	C,GOTBRK	JR	NZ,TSTEOF;;	Got a line of input, check if HEX parameter;HPARM	LD	DE,$-$	INC	E	JR	NZ,NOTHEX;;	Hex param was entered, convert input to hex;	LD	D,H	LD	E,L;HP1	CALL	CVRTHEX	DEC	B	JP	Z,ODDIGS;;	Stuff first digit into high order nybble;	RLCA	RLCA	RLCA	RLCA	LD	C,A;;	Get low order digit and OR with high-order;	CALL	CVRTHEX	OR	C	LD	(HL),A;;	Increment converted input pointer & count down;	INC	HL	DJNZ	HP1	JR	KSM?;;	ASCII input, point HL to next free location;NOTHEX	LD	C,B	LD	B,00H	ADD	HL,BC	INC	HL	JR	KSM?;;	EOF or BREAK hit - Test number of chars entered;	If not at line start, convert to CR and continue;TSTEOF	CP	1CH	JP	NZ,IOERRGOTBRK	LD	A,B	OR	A	JR	NZ,HPARM;;	Save input pointer address;GOTEND	LD	(ENDTXT+1),HL	LD	HL,BUFFERENDTXT	LD	DE,$-$;;	Is there any more text to write out?;	EX	DE,HL	XOR	A	SBC	HL,DE	JR	Z,ATEND;;	Write a byte to the file;	EX	DE,HL	LD	DE,FCB1	LD	C,(HL)	INC	HL	@@PUT	JR	Z,ENDTXT;;	Done writing - either end of text or error;ATEND	PUSH	AF;;	Close the file;	LD	DE,FCB1	@@CLOSE	JP	NZ,IOERR;;	Make sure @PUT didn't return an I/O error;	POP	AF	RET	Z	JP	IOERR;;	DSPLY - Display line & HL;DSPLY	@@DSPLY	RET	Z	JP	IOERR;;	CVRTHEX - Convert char at DE to hex;CVRTHEX	LD	A,(DE)	INC	DE	SUB	'0'	JR	C,BADDIGSA	CP	10	RET	C	RES	5,A	SUB	7	CP	16	RET	CBADDIGSA JP	BADIGS;;	Routine to pick up device/file name;$FNAME	BIT	7,A	JR	Z,FNAME1	@@FNAME	RETFNAME1	LD	A,'*'	LD	(DE),A	INC	DE	LD	A,C	LD	(DE),A	INC	DE	LD	A,B	LD	(DE),A	INC	DE	LD	A,03H	LD	(DE),A	RET;;	Error messages;ODDIGS$	DB	'Odd # of hex digits',0DHBADIGS$	DB	'Bad hex digit encountered',0DHSPCREQ$	DB	'File spec required',0DHEXISTS$	DB	'File already exists',0DHFILEBUF	DS	15BMESS1	DB	'Building: ',03HBMESS2	DB	'Appending: *KI to ',03HJCLEXT	DB	'JCL'LETBUF	DB	'A'-1,'=> ',03H;;	Parameter table;PRMTBL$	DB	80H		; Ver 6.x parameter table;;	HEX (H) parameter - flag input only;	DB	FLAG!ABB!3,'HEX',0	DW	HPARM+1;;	APPEND (A) parameter - flag input only;	DB	FLAG!ABB!6,'APPEND',0	DW	APPEND+1;	DB	00H		; End of param table;;	Buffer area;FCB1	DB	00H	DS	31;	ORG	$<-8+1<+8;IOBUF	DS	256BUFFER	DS	256;	END	START