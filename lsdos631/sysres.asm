;****************************************************************;* Filename: SYSRES/ASM						*;* Rev Date: 30 Nov 97						*;* Revision: 6.3.1						*;****************************************************************;	TITLE	'<SYSRES - LS-DOS 6.x Resident OS portion>';;------------------------------------------------------------------------------; This source code assembles the load module file SYS0/SYS, commonly referred; to as SYSRES. It contains the BDOS and other routines. It is ORGed at 1300H,; which puts it above LOWCORE and the low memory driver zone. It is loaded into; position by the boot loader in LOWCORE.  Once loaded, execution is begun at; the SYSINIT entry point. This initializes the remaining machine hardware,; loads the configuration file if present, executes any AUTO defined command,; and brings in the command interpreter.  The main subsections of SYSRES are:;;	Certain low memory values and the system flag table.;	FILPOSN - File read/write, positioning and allocation routines.;	LOADER	- SVC handling, overlay loading, command file loading.;	TASKER	- Interrupt processing.;	SYSINIT - System initialization after cold or warm boot.;	SOUND	- Sound, pause, and other miscellaneous low memory routines.;	LOGO	- The signon graphics display in direct load-to-screen format.;;==============================================================================; NOTE OF CHANGES BY PETE CERVASIO (cervasio@airmail.net);------------------------------------------------------------------------------;; The following equate, when set to 0FFH, will change the LS-DOS 6.3 boot logo,; and the position of the date, time, "SYSGEN" string, the auto command and; maybe a few other minor screen changes.  I did this because:;;	1 - I typed all this stuff in.  :);	2 - I don't like *SYSGEN* and the auto command to scroll;	    the logo off the screen.;; Just set @PCERV to 0 for standard LS-DOS 6.3.1 boot up screen stuff.  You; might want to try it once with it set to 0FFH, though, just to see what it; looks like. You might just like it, and it doesn't affect the operation of; the system, as far as I've been able to tell.  The changes this makes are; pretty much all in SYSINIT4/ASM and in SYSRES/ASM between FILPOSN/ASM and; LOADER/ASM.;------------------------------------------------------------------------------;@PCERV	EQU	0	; Use standard LS-DOS stuff;LF	EQU	10CR	EQU	13;*LIST	OFF*GET	LOWCORE/EQU		;Xref of LowCore*LIST	ON*GET	COPYCOM			;Embed copyright notice;	SUBTTL	'<System low core assignments>';;	LS-DOS 6.3 low core RAM storage assignments;	Copyright 1986,90 by MISOSYS, Inc.;START$	EQU	0	ORG	0+START$;;	Page 0 - RST's, data and buffers;@RST00	DI			;IPL entry for R/S 4P	LD	A,00000001B	;Set image in A	OUT	(09CH),A	;Toggle in boot ROM;	DB	0,0,0		;CP/M emulator SVC@RST08	RET	DW	0SVCRET$ DW	0		;Return address from SVCLSVC$	DB	0		;Last SVC executedFDDINT$ DI			;NOP or DI (0F3H) for	RET			;  SYSTEM (SMOOTH)@RST10	RET	DW	0USTOR$	DS	5		;User storage area@RST18	RET	DW	0PDRV$	DB	1		;Current drive, physicalPHIGH$	DW	0		;Physical HIGH$LOW$	DW	3000H		;Lowest usable memory@RST20	RET	DW	0LDRV$	DB	0		;Current drive, logicalJDCB$	DW	0		;Saved FCB pointerJRET$	DW	0		;Saved I/O return address@RST28	JP	RST28		;System SVC processorTIMSL$	DB	55H		;Fast=55h, Slow=FFhTIMER$	DB	0		;RTC counterTIME$	DC	3,0		;SS:MM:HH storage area@RST30	JP	@DEBUG		;DEBUG call addressDATE$	DS	5		;YY/DD/MM packed@RST38	JP	RST38@		;Interrupt RSTOSRLS$	DB	01H		;OS release number;;	INTIM$ stores the image read from RDINTSTATUS*;INTIM$	DB	0		;Interrupt latch image;;	INTMSK$ masks the image read from RDINTSTATUS*;	LSDOS 6.x permits only RS-232 RCV INT, IOBUS INT,;	and RTC INT to by used by the TASKER off RST38.;INTMSK$ DB	2CH		;Mask for INTIM$;;	INTVC$ stores the eight vectors associated;	with the INTIM$ bit assignments;INTVC$	DW	RETINST		;Primary interrupts	DW	RETINST,RTCPROC,RETINST	DW	RETINST,RETINST,RETINST,RETINST;;	TCB$ stores the TCB vectors for task slots 0-11;TCB$	DS	24		;Interrupt task vectors;;	NMI vector used in disk I/O;@NMI	DS	3		;Don't overlay this;;	OVRLY$ stores the system's overlay request;OVRLY$	DB	0		;Current overlay resident;;	FLGTAB$ stores 26 flags and images.  A pointer;	to this table is obtained from SVC @FLAGS;FLGTAB$ EQU	$;;;	AFLAG$ - Start cylinder for allocation search;AFLAG$	DB	01		;AFLAGBFLAG$	DB	00		;BFLAG;;	CFLAG$ assignments:;	 0 - Cannot change HIGH$ via SVC 100;	 1 - @CMNDR in execution;	 2 - @KEYIN request from SYS1;	 3 - System request for drivers, filters, DCTs;	 4 - @CMNDR to only execute LIB commands;	 5 - SYSGEN inhibit bit;	 6 - @ERROR inhibit display;	 7 - @ERROR to use user (DE) buffer;CFLAG$	DB	0		;Condition flag;;	DFLAG$ assignments:;	 0 - SPOOL is active;	 1 - TYPE ahead is active;	 2 - VERIFY is on;	 3 - SMOOTH active;	 4 - MemDISK active;	 5 - FORMS active;	 6 - KSM active;	 7 - accept graphics in screen print;DFLAG$	DB	00001010B	;DEV flag (SMOOTH,TYPE);;	EFLAG$ - Assignments: (SYS13 usage);	use only bits 4, 5 and 6 to indicate user;	entry code to be passed to SYS13.  SYS13;	will be executed from SYS1 if this byte;	is not 0. Bit 4,5,6 will be merged into;	the SYS13 (10001111b) overlay request;EFLAG$	DB	0		;Flag E;FEMSK$	DB	0		;Port FE mask;GFLAG$	DB	0		;Flag GHFLAG$	DB	0		;Flag H;;	IFLAG$ - Assignments: (INTERNATIONAL);	 0 - French;	 1 - German;	 2 - Swiss;	 3 -;	 4 -;	 5 -;	 6 - Special DMP mode On/Off;	 7 - '7' bit mode On/Off;IFLAG$	EQU	$	IF	@FRENCH	DB	01000001B	ENDIF	IF	@GERMAN	DB	01000010B	ENDIF	IF	@USA	DB	0	ENDIF;JFLAG$	DB	0		;Flag J (unused?);;	KFLAG$ assigments:;	 0 - BREAK latch;	 1 - PAUSE latch;	 2 - ENTER latch;	 3 - reserved;	 4 - reserved;	 5 - CAPS lock;	 6 - reserved;	 7 - character in TYPE ahead;KFLAG$	DB	0		;Keyboard flag;;	LFLAG$ assignments:;	 0 - inhibit step rate question in format;	 1 -;	 2 -;	 3 -;	 4 - inhibit 8" query in FLOPPY/DCT;	 5 - inhibit # sides question in format;	 6 - reserved for IM 2 hardware;	 7 - reserved for IM 2 hardware;LFLAG$	DB	00010001B	;LS-DOS feature inhibit;;	MODOUT$ mask assignments;	 0 -;	 1 - cassette motor on/off;	 2 - mode select (0=80/64, 1=40/32);	 3 - enable alternate character set;	 4 - enable external I/O;	 5 - video wait states (0=disable, 1=enable);	 6 - clock speed (1=4mhz, 0=2mhz);	 7 -;	IF	@INTLMODOUT$ DB	70H		;Modout international	ELSEMODOUT$ DB	78H		;Modout port image (FAST)	ENDIF;;;	NFLAG$ assignments (Network flags);	 0 - Allow setting of file open bit in DIR;	 1 - reserved;	 2 - reserved;	 3 - reserved;	 4 - reserved;	 5 - reserved;	 6 - Set if in Task processor;	 7 - reserved;NFLAG$	DB	0		;Inhibit open bit in DIR;;;	OPREG$ memory management image port;	 0 - SEL0 - Select map overlay bit 0;	 1 - SEL1 - Select map overlay bit 1;	 2 - 80/64 - 1=80x24, 0=64x16;	 3 - Inverse video;	 4 - MBIT0 - memory map bit 0;	 5 - MBIT1 - memory map bit 1;	 6 - FXUPMEM - fix upper memory;	 7 - PAGE - page 1K video RAM (set for 80x24);OPREG$	DB	87H		;Memory management image;;;	PFLAG$ assignments: (Printer flag);	 0 -;	 1 -;	 2 -;	 3 -;	 4 -;	 5 -;	 6 -;	 7 - Printer spooler is paused;PFLAG$	DB	0		;PFLAG$;QFLAG$	DB	0		;QFLAG$;;	RFLAG$ - Retry init for FDC driver;RFLAG$	DB	08		;FDC retry count >=2;;;	SFLAG$ assignments;	 0 - Inhibit file open bit;	 1 - Set to 1 if bit 2 set and EXEC file opened;	 2 - Set by @RUN to permit load of EXEC file;	 3 - SYSTEM (FAST);	 4 - BREAK key disabled;	 5 - JCL active;	 6 - Force extended error messages;	 7 - DEBUG to be turned on after load;SFLAG$	DB	8		;System flag (FAST);;;	Machine TYPE assignment:;	All values are in decimal;;	 2 = TRS-80 Model 2;	 4 = TRS-80 Model 4;	 5 = TRS-80 Model 4P;	12 = TRS-80 Model 12;	16 = TRS-80 Model 16;	IF	@MOD4TFLAG$	DB	04		;Model 4 assignment	ELSE	ERR	'Undefined machine TYPE for TFLAG'	ENDIF;UFLAG$	DB	0		;Flag U;;	Video Flag assignments:;	0-3 - Set blink rate (1=fastest, 7=slowest);	  4 - Display CLOCK;	  5 - Cursor blink toggle bit;	  6 - Inhibit blinking cursor (user);	  7 - Inhibit blinking cursor (system);VFLAG$	DB	0		;Blink, Slow, No clock;;	WRINT$ - interrupt mask register;	 0 - Enable 1500 baud rising edge;	 1 - Enable 1500 baud falling edge;	 2 - enable real time clock;	 3 - enable I/O bus interrupts;	 4 - enable RS-232 transmit interrupts;	 5 - enable RS-232 receive data interrupts;	 6 - enable RS-232 error interrupt;	 7 - reserved;WRINT$	DB	4		;WRINTMASK port imageXFLAG$	DB	0;;	YFLAG$ contains flags for each logical drive saying;	whether that drive uses the new date format or not.;	Default is all eight drives -DO- use new date format.;YFLAG$	DB	11111111B	; All use new dates;ZFLAG$	DB	0;;	Contents are high-order byte of SVC table;	DB	SVCTAB$<-8	;MSB of SVC table;;	OSVER$ stores the operating system version;OSVER$	DB	63H		;OS version #;;	Vector for config initialization;@ICNFG	RET			;Initialization config	DW	0;;	Chain vector for KI task processor;@KITSK	RET			;Keyboard task routine	DW	0;;	System file control block for overlays;SFCB$	DB	80H,0,0		;System's /SYS FCB	DW	SBUFF$	DB	0	DW	0,0,0,-1,0,-1,-1;;	32 byte DEBUG save area;DBGSV$	DS	32;;	Job Control Language file control block;JFCB$	DC	3,0	DW	SBUFF$	DS	27;;	System command line file control block;CFCB$	EQU	$		;Command interpreter FCBCFGFCB$ DB	'CONFIG/SYS.CCC:0',3	DS	15;;	Page 1 - System Supervisor Call Table;SVCTAB$ EQU	$	IFNE	$,100H	ERR	'SVCTAB location violation!'	ENDIF;;	Initial version;MAXCOR$ EQU	2400H+START$MINCOR$ EQU	3000H+START$	ORG	@BYTEIO;;	File positioning routines - MUST BE FIRST!;	SUBTTL	'<File positioning subroutines>'*GET	FILPOSN	PAGECORE$	DEFL	$;	IFEQ	@PCERV,0;	ORG	CRTBGN$+13	DB	'LS-DOS 06.03.01';	IF	@USA	DB	' '	ENDIF	IF	@GERMAN	DB	'G'	ENDIF	IF	@FRENCH	DB	'F'	ENDIF;	DB   '- Copyright 1986/90 MISOSYS, Inc.    ';	ORG  CRTBGN$+80+14	DB   '               All Rights Reserved.                ';	ENDIF;	ORG	CORE$;;	get the system loader;	SUBTTL	'<System Loader and associated routines>'*GET	LOADER	SUBTTL	'<System front end & task processor>'*GET	TASKER	IFGT	$,1D00H+START$	ERR	'SYSRES memory overflow!'	ENDIFCORE$	DEFL	$	DC	1D00H-CORE$,0	ORG	CORE$	ORG	1D00H+START$SBUFF$	EQU	$	DS	256		;Page disk I/O bufferDIRBUF$ EQU	MAXCOR$-256	;Another file buffer;;	Get the system initialization module;OVERLAY EQU	$	SUBTTL	'<System initialization routines>'	PAGE*GET	SYSINIT4	SUBTTL	'<Misc. lowcore routines>'	PAGE*GET	SOUND	SUBTTL	'<Sign-on LOGO display>';	IF	@PCERV*GET	CERVLOGO;	ORG	CRTBGN$+160+64	DB	'06.03.01';	ELSE*GET	LOGO		; LSI Square Logo;*GET	LSILOGO		; LSI Square Logo (same);*GET	RSLOGO		; Tandy Logo;*GET	RSLOGOA		; Tandy Logo (same);*GET	LOGO1		; Tandy 3D Logo;*GET	RSLOGOB		; Tandy 3D Logo;*GET	RSLOGOX		; Tandy 3D Logo (higher letters);*GET	IBMLOGO		; IBM Logo;*GET	LOGO2		; Tandy Model II Logo;*GET	RSLOGO2		; Tandy Model II Logo (wider);*GET	BEARLOGO	; Dean Bear's Logo (LS-DOStm)	ENDIF;	ORG	0036H	DB	0;	END	OVERLAY