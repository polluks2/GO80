; ***************************************************************; * Filename: DATECONV/ASM					*; * Revision: 06.03.01						*; * Rev Date: 20 Dec 97						*; ***************************************************************; * Diskette Date Conversion Utility				*; *								*; * This utility will take pre-version 6.3 disks and convert	*; * them to the 6.3 date format.  Will not convert system disks	*; * if they are version 6.2 or earlier.  (CS) parameter forces	*; * the conversion.						*; ***************************************************************;	TITLE	<DATECONV - LS-DOS 6.3>;CR	EQU	13LF	EQU	10BLNKMPW	EQU	4296H;*GET	SVCMAC			; System SVC macros*GET	COPYCOM			; Copyright message;	ORG	2600H;BEGIN	LD	(STACK),SP	; Save stack pointer	@@CKBRKC		; Check for break	JP	NZ,$ABORT	; Abort if so	PUSH	HL		; Save command line pointer	LD	HL,HELLO$	; Show sign-on message	CALL	DSPLY	POP	HL		; Get command line back	CALL	DATECNV		; Do the date conversion	LD	HL,0		; Init no error - clean exitQUIT$	LD	SP,0		; Get original stack backSTACK	EQU	$-2	@@CKBRKC		; Clean up any <BREAK>	RET			; Return to the user;;	Date conversion start;DATECNV	LD	A,(HL)		; Skip over spaces	CP	' '	INC	HL	JR	Z,DATECNV	; Loop while spaces	CP	':'		; Colon indicator?	JP	NZ,ILLEGAL	LD	A,(HL)		; Get drive number	SUB	'0'		; Convert to binary	JP	C,ILLEGAL	; Go if less than 0	CP	7+1		; Check range	JP	NC,ILLEGAL	; Go if too high;;	Save drive number for later;	LD	(WRDRV),A	LD	(RDDRV),A;;	Skip over spaces, look for start of params;SKIPSPC	INC	HL		; Bump cmd line pointer	LD	A,(HL)		; Get cmd line char	CP	CR+1		; End of line?	JR	C,CMLNDUN	; Done with cmd line if so	CP	' '		; Space?	JR	Z,SKIPSPC	; Loop if it is	CP	'('		; Start of params?	JR	NZ,SKIPSPC	; Loop back if not;;	Parse user's entered parameters;	LD	DE,PRMTBL$	@@PARAM			; Parse parameters	JP	NZ,IOERR	; Quit on parameter error;CMLNDUN	LD	A,(WRDRV)	; Get the drive #	LD	C,A		; Store it in C	@@CKDRV			; Check if drive okay	JP	NZ,ILLEGAL	; Abort if illegal drive #	JP	C,WRPROT	; Jump if write protected;;	Get the directory cylinder of the drive & read GAT;	@@GTDCT			; Get DCT$ for the drive	LD	A,(IY+09H)	; Get directory track	LD	(SAVEDIR+1),A	; Save it for later	LD	D,A		; D = dir cylinder	LD	E,00H		; E = GAT sector (0)	CALL	RDSEC		; Read it;;	Check if CS parameter entered on cmd line;CSPARM	LD	DE,0		; Get CS parameter	LD	A,D		; Specified?	OR	E	JR	NZ,SAVEDIR;	LD	A,(BUFFER+0CDH)	; Get config byte	BIT	3,A		; New dates already?	JP	Z,SKPSAV	; Skip setting of flag	LD	(SAVCFG),A	; Save config byte for later	JR	SAVEDIRSKPSAV	BIT	7,A		; Is it a data disk?	JR	NZ,SAVEDIR	; Go if it's not	LD	DE,0002		; Get system info sector	CALL	RDSEC	LD	A,(HL)	CP	63H		; Ver 6.3 disk?	JR	Z,SAVEDIR	JP	NON63D		; Non 6.3 system disk;;	Get DIR/SYS size and force not too large;SAVEDIR	LD	D,00H		; Pick up directory cylinder	LD	E,03H		; Sector holding DIR/SYS entry	CALL	RDSEC	LD	A,(BUFFER+20)	; Get ERN of DIR/SYS	SUB	01H	CP	33	JR	C,SKPFRC	; Go if not more	LD	A,33		; Force it to 33SKPFRC	LD	(DIRERN),A	; Save for test later;;	Convert Directory entries to new date format;	LD	E,02H		; Past GAT and HITOUTRLP	CALL	RDSEC		; Read DIR sectorINNRLP	PUSH	HL	BIT	7,(HL)		; Is this an FPDE?	JP	NZ,RECDUN	; Jump if it's an FXDE	BIT	4,(HL)		; Is this dirrec in use?	JP	Z,RECDUN	; Jump if not active;	INC	L		; Point to day/year field	INC	L	LD	A,(HL)		; Get day/year modified	OR	A		; Is it set to anything?	JR	Z,RECDUN	; Go if it isn't	AND	07H		; Keep the year	LD	C,A		; Store it in C	LD	A,L		; Point to DIR+18	ADD	A,10H	LD	L,A	LD	A,00H		; Will be 0 if disk hadSAVCFG	EQU	$-1		;   old dates	OR	A		; Had old dates?	JR	Z,SKIPPW	; Skip password test if so	PUSH	DE		; Save DE and HL	PUSH	HL	LD	DE,BLNKMPW	; Get old user password	LD	A,(HL)		;  into HL	INC	HL	LD	H,(HL)	LD	L,A	OR	A		; Clear carry	SBC	HL,DE		; Old user = blank password?	POP	HL		; Get HL and DE back	POP	DE	JR	NZ,RECDUN	; Skip if notSKIPPW	LD	(HL),00H	; Store 0 in time field	INC	HL		; Point to new year	LD	(HL),C		; Stuff year into dir	LD	HL,(COUNT)	; Get count of records fixed	INC	HL		; Increment count	LD	(COUNT),HL	;   and save it back;RECDUN	@@CKBRKC		; Check if break hit	JP	NZ,CNVABT	; Abort if it has	POP	HL		; Recover pointer to DIR	LD	A,L		; Point to next DIRREC	ADD	A,32	LD	L,A	JP	NZ,INNRLP	; Loop back if not done	CALL	WRSEC		;  else write sector back;;	See if we're done with the directory cylinder;	LD	A,00H		; Get DIR/SYS ending sectorDIRERN	EQU	$-1	INC	E		; Bump current sector	CP	E		; Are we done yet?	JP	NC,OUTRLP	; Loop back if not;;	Update the GAT;	LD	E,00H		; Get GAT sector	CALL	RDSEC	LD	A,(BUFFER+0CDH)	; Get config byte	OR	08H		; Merge in new date flag	LD	(BUFFER+0CDH),A	; Save back in GAT	LD	A,63H		; Version flag	LD	(BUFFER+0CBH),A	; Write in version byte	CALL	WRSEC		; Write GAT back out;;	Tell user how many entries were fixed;	LD	HL,(COUNT)	; Get count	LD	DE,CNVDUN$	; Point to string	PUSH	DE		; Save string address	@@HEXDEC		; Convert HL to decimal	POP	HL		; Get string addr in HL	@@LOGOT			; Display the message	RET			;   and return;;	DSPLY - Display a message;DSPLY	@@DSPLY			; Display string in HL	RET	Z		; Return if okay	JR	IOERR		; Otherwise it's an error;;	WRSEC - Write and verify a sector;WRSEC	LD	HL,BUFFER	; Point to sector buffer	LD	C,00H		; Pick up drive to useWRDRV	EQU	$-1	@@WRSSC			; Write system sector	JR	NZ,IOERR	; Quit on error	@@VRSEC			; Verify what was written	CP	06H		; Expect error 6	JR	NZ,IOERR	; Error if it's not	RET;;	RDSEC - Read a sector;RDSEC	LD	HL,BUFFER	; Point HL to buffer	LD	C,00H		; Pick up correct driveRDDRV	EQU	$-1	@@RDSEC			; Read sector	RET	Z		; Return if okay	CP	06H		; Error 6 is okay, too	RET	Z;;	Error handling routine;IOERR	CP	63		; Extended error?	JR	Z,LOGERR	; Log error if so	LD	H,00H		; Move error # to HL	LD	L,A	PUSH	HL		; Save error code	OR	0C0H		; Short msg, return	LD	C,A	@@ERROR			; Display error	POP	HL		; Recover HL	JR	DOQUIT;;	Internal error handling;NON63D	LD	HL,NON63D$	; Can't on non-6.3 system	DB	0DDHWRPROT	LD	HL,WRPROT$	; Write protected disk	DB	0DDHCNVABT	LD	HL,CNVABT$	; Conversion aborted.LOGERR	@@LOGOT			; Display error message;$ABORT	LD	HL,-1		; Init error code;DOQUIT	JP	QUIT$;;	Illegal drive number detected;ILLEGAL	LD	A,32		; init "Illegal drive #	JP	IOERR;;	Messages and data area;HELLO$	DB	'DATECONV'*GET	CLIENTCNVDUN$	DB	'      file(s) updated, conversion complete',0DHCNVABT$	DB	'Date conversion aborted',0DHNON63D$	DB	'Can',27H,'t convert dates on a non-6.3 SYSTEM disk',0DHWRPROT$	DB	'Write protected drive',0DH;;	Parameter table;PRMTBL$	DB	80H		; Version 6.3 parameter table	DB	42H		; Flag, 2 chars long	DB	'CS'	DB	00H	DW	CSPARM+1	DB	00H;	DC	3,0COUNT	DW	0;;	Buffers;	ORG	$<-8+1<+8;BUFFER	DS	256;	END	BEGIN