;LBLOAD/ASM - Load and Run commands	TITLE	<LOAD/RUN - LS-DOS 6.3>;CR	EQU	13RST28	EQU	28H;*GET	SVCEQU			; DOS SVC equates;	ORG	2400H;;	RUN entry point;RUN	JP	RUN0		; RUN code;;	LOAD entry point;LOAD	CALL	COMMON		; Parse params and filespec	JR	NZ,IOERR	LD	A,(XPARM+1)	; If not (X) go do it	OR	A	JR	NZ,NEEDPR	LD	DE,FCB		; Point to FCB	LD	A,@LOAD	RST	28H	JR	NZ,IOERR	; Go on error	JR	EXIT		;   or just exit;;	Need to prompt for system disk;NEEDPR	CALL	LOADIT		; Load the file	JR	NZ,IOERR	; Exit if error	LD	HL,0		; Init no error;;	Get the system disk back in system drive;PMTSYS	PUSH	HL		; Save error code	LD	HL,PMTSYS$	CALL	FLASH	POP	HL		; Get error code back	RET;;	RUN command code;RUN0	CALL	COMMON		; Parse common args	JR	NZ,IOERR	; Go on error	LD	A,(XPARM+1)	OR	A	LD	DE,FCB	JR	NZ,RUN1	LD	A,@RUN	JP	RST28;RUN1	PUSH	HL		; Save cmd line ptr	LD	DE,FCB	CALL	LOADIT	EX	(SP),HL		; Get cmd ptr & save ept	JR	Z,PMTSYS	; Run if prog OK or	POP	HL		; prompt TRAADR & error;;	Error handling;IOERR	CP	63		; If extended error	JR	Z,EXTERR	; Handle by @LOGOT	LD	L,A		; Put error into HL	LD	H,00H	OR	0C0H		; Short error and return	LD	C,A	LD	A,@ERROR	; Show error msg	RST	28H	RET			; and return;EXTERR	LD	A,@LOGOT	; Log error message	RST	28H	LD	HL,-1		; Set our own error	RET			;   and exit;EXIT	LD	HL,0		; Set no error	RET			;   and exit;;	Flash the prompt and await reply;FLASH0	CALL	RESKFLG		; Reset keyboard flagsFLASH	LD	BC,16893	; Delay for 250 msec	LD	A,@PAUSE	RST	28H	LD	A,(IY+'K'-'A')	AND	4!1H		; Wait for no ENTER!BREAK	JR	NZ,FLASH0	CALL	RESKFLG		; Reset in case BREAK;FLS1	LD	A,@DSPLY	RST	28H	JP	NZ,IOERR	; Abort on error;	LD	BC,4000H	CALL	FLS2		; Blink start	JR	NZ,GOTBRK	; Handle BREAK if needed	LD	C,1EH		; Cursor erase to EOL	CALL	DSP	LD	BC,3333H	; Wait value	CALL	FLS2		; Wait and check ENTER	JR	NZ,GOTBRK	; Handle BREAK if needed	JR	FLS1;;	FLS2 - Display a while and check on ENTER/BREAK;FLS2	LD	A,@CKBRKC	; BREAK hit?	RST	28H	JR	Z,CKENT	LD	C,1EH		; Erase line	CALL	DSP		; Output byte	XOR	A		; Set NZ	INC	A	RET			;   and return;CKENT	BIT	2,(IY+'K'-'A')	; Check ENTER bit	JR	NZ,FLS4		; Go if enter pressed	DEC	BC		; Count down	LD	A,B	OR	C	JR	NZ,FLS2	RET			; Return with Z flag;;	ENTER condition found;FLS4	POP	AF		; Pop return codeFLS5	LD	A,@KBD		; Clear type ahead buffer	RST	28H	JR	Z,FLS5		; Loop if we have a char	LD	C,1EH		; Wipe Line	CALL	DSP	LD	C,0EH		; Cursor on	CALL	DSPRESKFLG	LD	A,(IY+'K'-'A')	; Reset 3 bit field	AND	0F8H	LD	(IY+'K'-'A'),A	XOR	A		; Set Z flag	RET;GOTBRK	LD	HL,STOP$	; Point to error message	LD	A,63		; Init extended error	RET			; and return NZ;;	Common initialization routine;COMMON	LD	DE,PRMTBL	; Point to param table	LD	A,@PARAM	; Parse the parameters	RST	28H	RET	NZ		; REturn if error;	LD	A,@FLAGS	; Get system flags	RST	28HCOMM1A	LD	A,(HL)		; Skip past spaces	CP	' '	JR	NZ,COMM2	INC	HL	JR	COMM1A;COMM2	LD	DE,FCB		; Get filespec	LD	A,@FSPEC	RST	28H	JR	NZ,COMM3	; Go on error	LD	A,(DE)		; Device spec not allowed	CP	'*'	JR	NZ,COMM4	; Go if okay;COMM3	LD	HL,SPCREQ$	; Point to error msg	LD	A,63		; Init extended error	OR	A		; Set NZ condition	RET;COMM4	PUSH	HL		; Save cmd line ptr	LD	HL,CMDEXT	LD	A,@FEXT		; Set default ext	RST	28H	CALL	GOSYS2		; Get SYS2 for open	POP	HL	RET	NZ;;	Check on (X) param;XPARM	LD	DE,0		; Get X param	LD	A,D	OR	E	RET	Z		; Return if not set;	PUSH	HL		; Save pointer	LD	HL,PMTSRC$	; Prompt for source	CALL	FLASH	POP	DE		; Pointer to DE	RET	NZ		; Back on error in HL	EX	DE,HL		; If no error, then	RET			;   pointer back to HL;;	Call SYS2 for open routine;GOSYS2	LD	A,84H		; Load SYS2	RST	28H;;	Loading routine;LOADIT	LD	DE,FCB	SET	2,(IY+'S'-'A')	; Turn on the RUN flag	LD	A,@LOAD	RST	28H	RET	Z	PUSH	AF		; Save error ret code	CALL	PMTSYS		; Get system disk back	POP	AF		; Recover error code	RET;DSP	LD	A,@DSP		; Display a byte	RST	28H	RET	Z		; Return if okay	JP	IOERR;;SPCREQ$	DB	'File spec required',CRPMTSYS$	DB	0FH,1DH,1EH,'Insert SYSTEM disk <ENTER>',1DH,03HPMTSRC$	DB	0FH,1DH,1EH,'Insert SOURCE disk <ENTER>',1DH,03HSTOP$	DB	0EH,1DH,'Command aborted',0DH;;	Parameter Table;PRMTBL	DB	80H		; Version 6.x table	DB	41H	DB	'X'	DB	00H	DW	XPARM+1	DB	00H;;CMDEXT	DB	'CMD'FCB	DB	00H	DS	31;	END	LOAD